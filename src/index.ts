import { app, BrowserWindow, net, protocol, session } from 'electron';
import { nativeBridgeRegistry } from './nativeBridge/registry';
import { statSync } from 'fs-extra';
import fs from 'fs';
import path from 'path';
import { ObsModule } from './nativeBridge/modules/obsModule';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient('lol-obs-helper', process.execPath, [path.resolve(process.argv[1])]);
  }
} else {
  app.setAsDefaultProtocolClient('lol-obs-helper');
}

app.on('before-quit', () => {
  (nativeBridgeRegistry.getModule('ObsModule') as ObsModule)?.shutdown();
});

protocol.registerSchemesAsPrivileged([
  {
    scheme: 'vod',
    privileges: {
      standard: true,
      bypassCSP: true,
      stream: true,
      supportFetchAPI: true,
    },
  },
  {
    scheme: 'static',
    privileges: {
      bypassCSP: true,
      stream: true,
      supportFetchAPI: true,
    },
  },
]);

const createWindow = () => {
  const mainWindow = new BrowserWindow({
    height: 935,
    width: 1800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.setMinimumSize(1280, 720);
  nativeBridgeRegistry.startListeners(mainWindow);

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' 'unsafe-inline' 'unsafe-eval'; media-src vod: static:; connect-src *; img-src *",
        ],
      },
    });
  });

  protocol.handle('vod', async (request) => {
    try {
      const sliced = request.url.toString().slice('vod://vods/'.length);
      const requestUrl = decodeURIComponent(sliced);

      if (!requestUrl) {
        return new Response('', {
          status: 404,
          statusText: 'Not Found',
        });
      }

      const filename = Buffer.from(requestUrl, 'base64').toString('utf-8');

      if (!fs.existsSync(filename)) {
        return new Response('', {
          status: 404,
          statusText: 'File Not Found',
        });
      }

      const stats = statSync(filename);
      const fileSize = stats.size;
      const rangeHeader = request.headers.get('Range');

      if (rangeHeader) {
        const rangeParts = rangeHeader.replace(/bytes=/, '').split('-');
        const start = parseInt(rangeParts[0], 10);
        const end = rangeParts[1] ? parseInt(rangeParts[1], 10) : fileSize - 1;

        const chunkSize = end - start + 1;
        const stream = fs.createReadStream(filename, { start, end });

        return new Response(stream as unknown as BodyInit, {
          status: 206,
          statusText: 'Partial Content',
          headers: {
            'Content-Range': `bytes ${start}-${end}/${fileSize}`,
            'Accept-Ranges': 'bytes',
            'Content-Length': chunkSize.toString(),
            'Content-Type': 'video/mp4',
            'Cache-Control': 'no-cache',
          },
        });
      } else {
        const stream = fs.createReadStream(filename);

        return new Response(stream as unknown as BodyInit, {
          status: 200,
          headers: {
            'Content-Length': fileSize.toString(),
            'Accept-Ranges': 'bytes',
            'Content-Type': 'video/mp4',
            'Cache-Control': 'no-cache',
          },
        });
      }
    } catch (error) {
      console.error('Protocol handler error:', error);
      return new Response('Internal Server Error', {
        status: 500,
        statusText: 'Internal Server Error',
      });
    }
  });

  protocol.handle('static', async (request) => {
    const fileUrl = request.url.replace('static://', '');
    const filePath = path.join(app.getAppPath(), '.webpack/renderer/static', fileUrl);
    const fetched = await net.fetch(filePath);
    fetched.headers.set('content-type', 'audio/wav');
    return fetched;
  });

  mainWindow.on('minimize', function () {
    mainWindow.hide();
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setMenuBarVisibility(false);
  mainWindow.webContents.openDevTools();

  return mainWindow;
};

const isFirstInstance = app.requestSingleInstanceLock();

if (!isFirstInstance) {
  app.quit();
} else {
  let win: BrowserWindow;
  app.on('ready', () => {
    win = createWindow();

    app.on('second-instance', () => {
      if (!win.isVisible()) {
        win.show();
      }
      win.focus();
    });
  });

  app.on('window-all-closed', () => {
    app.quit();
  });

  app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });

  app.on('open-url', (event, url) => {
    console.log('open-url', { event, url });
    try {
      win.webContents.send('native:login:didLogin', atob(url.replace(/^lol-obs-helper:\/\//g, '')));
    } catch (err) {
      console.log(err);
    }
  });

  app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
    console.log('certificate-error', { event, webContents, url, error, certificate });
    // League client uses a self-signed cert for local api, we can just assume it's OK
    if (url.startsWith('https://127.0.0.1:2999/')) {
      // Verification logic.
      event.preventDefault();
      callback(true);
    } else {
      callback(false);
    }
  });
}
