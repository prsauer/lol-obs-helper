import { app, BrowserWindow, protocol, session } from "electron";
import { nativeBridgeRegistry } from "./nativeBridge/registry";
import { openSync, readSync, closeSync, statSync } from "fs-extra";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

protocol.registerSchemesAsPrivileged([
  {
    scheme: "vod",
    privileges: {
      bypassCSP: true,
      standard: true,
      stream: true,
      supportFetchAPI: true,
    },
  },
]);

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 935,
    width: 1800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  nativeBridgeRegistry.startListeners(mainWindow);

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": [
          "default-src 'self' 'unsafe-inline' 'unsafe-eval'; media-src vod:; connect-src *",
        ],
      },
    });
  });

  protocol.handle("vod", async (request) => {
    const filename = decodeURI(request.url).slice(
      "vod://".length,
      request.url.length - 3
    );

    const rangeReq = request.headers.get("Range") || "bytes=0-";
    const parts = rangeReq.split("=");
    const numbers = parts[1].split("-").map((p) => parseInt(p));

    const fp = openSync(`D:\\Video\\${filename}`, "r");
    const size = 2500000; // ~2.5mb chunks
    const start = numbers[0] || 0;
    const buffer = Buffer.alloc(size);
    readSync(fp, buffer, 0, size, start);

    const stats = statSync(`D:\\Video\\${filename}`);
    const totalSize = stats.size;
    closeSync(fp);

    return new Response(buffer, {
      status: 206,
      statusText: "Partial Content",
      headers: {
        "Content-Length": `${totalSize}`,
        "Accept-Ranges": "bytes",
        "Content-Range": `bytes ${start}-${totalSize}`,
      },
    });
  });

  mainWindow.on("minimize", function (event: { preventDefault: () => void }) {
    event.preventDefault();
    mainWindow.hide();
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setMenuBarVisibility(false);
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
